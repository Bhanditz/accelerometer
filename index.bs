<pre class="metadata">
Title: Accelerometer
Level: 1
Status: ED
ED: https://w3c.github.io/accelerometer/
Shortname: accelerometer
TR: https://www.w3.org/TR/accelerometer/
Editor: Anssi Kostiainen 41974, Intel Corporation, https://intel.com/
Editor: Alexander Shalamov 78335, Intel Corporation, https://intel.com/
Group: dap
Abstract:
  This specification defines accelerometer sensor interface for
  obtaining information about <a>acceleration</a> applied to the X, Y and Z axis
  of a device that hosts the sensor.
Version History: https://github.com/w3c/accelerometer/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/accelerometer/issues/new">via the w3c/accelerometer repository on GitHub</a>
Indent: 2
Repository: w3c/accelerometer
Markup Shorthands: markdown on
Inline Github Issues: true
!Test Suite: <a href="https://github.com/w3c/web-platform-tests/tree/master/accelerometer">web-platform-tests on GitHub</a>
Boilerplate: omit issues-index, omit conformance
Default Biblio Status: current
Note class: note
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/sensors; spec: GENERIC-SENSOR
  type: dfn
    text: high-level
    text: sensor
    text: latest reading
    text: default sensor
    text: construct a sensor object; url: construct-sensor-object
</pre>

Introduction {#intro}
============

The Accelerometer API extends the Generic Sensor API [[GENERIC-SENSOR]]
interface to provide information about <a>acceleration</a> applied to device's
X, Y and Z axis in <a>local coordinate system</a> defined by device.

Examples {#examples}
========

<div class="example">
    <pre highlight="js">
    let sensor = new Accelerometer();
    sensor.start();

    sensor.onchange = () => {
        console.log("Acceleration along X-axis: " + sensor.x);
        console.log("Acceleration along Y-axis: " + sensor.y);
        console.log("Acceleration along Z-axis: " + sensor.z);
    }

    sensor.onerror = event => console.log(event.error.name, event.error.message);
    </pre>
</div>

Security and Privacy Considerations {#security-and-privacy}
===================================

There are no specific security and privacy considerations
beyond those described in the Generic Sensor API [[!GENERIC-SENSOR]].

Model {#model}
=====

The accelerometer's associated {{Sensor}} subclass is the {{Accelerometer}} class.

Accelerometer has a <a>default sensor</a>, which is the device's main accelerometer sensor.

A [=latest reading=] per [=sensor=] of accelerometer type includes three [=map/entries=]
whose [=map/keys=] are "x", "y", "z" and whose [=map/values=] contain device's <a>acceleration</a>
about the corresponding axes.

The <dfn>acceleration</dfn> is the rate of change of velocity of a device with respect to time. Its 
unit is the metre per second squared (m/s^2) [[SI]].

The frame of reference for the <a>acceleration</a> measurement must be inertial, such as, the device in free fall would
provide 0 (m/s^2) <a>acceleration</a> value for each axis.

The sign of the <a>acceleration</a> values must be according to the right-hand convention in a <a>local coordinate
system</a> defined by the device.

Note: The <dfn>local coordinate system</dfn> of a mobile device is usually defined relative to
the device's screen when the device in its default orientation (see figure below).

<img src="accelerometer_coordinate_system.png" srcset="accelerometer_coordinate_system.svg" alt="Accelerometer coordinate system.">

The <dfn>linear acceleration</dfn> is an <a>acceleration</a> that is applied to the device that hosts
the sensor, without the contribution of a gravity force.

API {#api}
===

The Accelerometer Interface {#accelerometer-interface}
--------------------------------

<pre class="idl">
  [Constructor(optional AccelerometerOptions accelerometerOptions)]
  interface Accelerometer : Sensor {
    readonly attribute unrestricted double? x;
    readonly attribute unrestricted double? y;
    readonly attribute unrestricted double? z;
    readonly attribute boolean includesGravity;
  };
</pre>

To <dfn>Construct an Accelerometer Object</dfn> the user agent must invoke
the <a>construct a Sensor object</a> abstract operation.

### Accelerometer.x ### {#accelerometer-x}

The {{Accelerometer/x!!attribute}} attribute of the {{Accelerometer}}
interface represents the <a>acceleration</a> along X-axis.
This attribute returns [=map/value=] for [=latest reading=]["x"] [=map/entry=].

### Accelerometer.y ### {#accelerometer-y}

The {{Accelerometer/y!!attribute}} attribute of the {{Accelerometer}}
interface represents the <a>acceleration</a> along Y-axis.
This attribute returns [=map/value=] for [=latest reading=]["y"] [=map/entry=].

### Accelerometer.z ### {#accelerometer-z}

The {{Accelerometer/z!!attribute}} attribute of the {{Accelerometer}}
interface represents the <a>acceleration</a> along Z-axis.
This attribute returns [=map/value=] for [=latest reading=]["z"] [=map/entry=].

### Accelerometer.includesGravity ### {#accelerometer-includesGravity}

The {{Accelerometer/includesGravity!!attribute}} attribute of the {{Accelerometer}}
interface represents whether the <a>acceleration</a> information provided by the sensor includes the effect of the gravity
force. In case when {{Accelerometer/includesGravity!!attribute}} equals to false, {{Accelerometer}}
will provide <a>linear acceleration</a> information.

The AccelerometerOptions Dictionary {#accelerometer-options-dictionary}
--------------------------------

<pre class="idl">
  dictionary AccelerometerOptions :  SensorOptions  {
    boolean includeGravity = true;
  };
</pre>

By default, accelerometer sensor provides <a>acceleration</a> information including the effect of the gravity force.
In cases when <a>linear acceleration</a> information is required, {{AccelerometerOptions}} dictionary
must include an [=map/entry=] whose [=map/key=] is "includeGravity" and whose [=map/value=] is false.

Acknowledgements {#acknowledgements}
================

Tobie Langel for the work on Generic Sensor API.

Conformance {#conformance}
===========

Conformance requirements are expressed with a combination of
descriptive assertions and RFC 2119 terminology. The key words "MUST",
"MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
document are to be interpreted as described in RFC 2119.
However, for readability, these words do not appear in all uppercase
letters in this specification.

All of the text of this specification is normative except sections
explicitly marked as non-normative, examples, and notes. [[!RFC2119]]

A <dfn>conformant user agent</dfn> must implement all the requirements
listed in this specification that are applicable to user agents.

The IDL fragments in this specification must be interpreted as required for
conforming IDL fragments, as described in the Web IDL specification. [[!WEBIDL]]
